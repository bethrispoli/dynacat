function plotSingleRSMinMDS(RSM, subj,session,ROItoAlign)
%% plotSingleRSMinMDS(RSM, subj,session,ROItoAlign)
%
% Create MDS plot for an RSM for the 5 domain, 10 category experiment
% align RSMS of all ROIs to the MDS of 'ROItoAlign'
% The RSM is converted to a distance matrix: D=1-r
% 
%
% INPUTS
% RSM structure generated by computeRSMs.For each ROI contains a 10
% category csym (symmetricized RSM) for each of the subject session
% subj: subject's initial (e.g.,OS)
% session: session ID (e.g., OS_4_1)
% ROItoAlign: name of ROI to align the MDS using the Procrustes
%             transform (e.g., lh_vtc_lateral)
%
% Written by MN 2020


% Which subject and session is plotted:
if notDefined('subj')
    subj = 'OS';
end
if notDefined('session')
    session = 'OS_4_1';
end
% if we want to use procrustes to alig
if notDefined ('ROItoAlign')
    ROItoAlign='lh_vtc_lateral'
end

% Get list of rois
rois = fieldnames(RSM);

for r=1:length(rois)
    % Extract data from struct
    roi = rois{r};
    RSMdata = RSM.(roi).(subj).(session).csym;

    %% Convert RSM to dissimilarity matrix (1-correlation)
    % Since pdist returns pairwise distances as a vector, 
    % use squareform to reformt it back to a matrix.
    matrixDist = squareform(pdist(RSMdata,'correlation'));
    
   % Use Classical Multidimensional Scaling to embed distance matrix to 2D
    matrixEmb = cmdscale(matrixDist, 2);

    %% Align the embedding of this ROI to the MDS of ROItoAlign
    if strcmp(roi, ROItoAlign)
        matrixEmbROI1 = matrixEmb;
    end

    % For ROItoAlign simply align to itself (stress should be 0), otherwise
    % align embedding to ROItoAlign
    [resStress, matrixEmbRoiAligned] = procrustes(matrixEmbROI1, matrixEmb);

    %% Set up colors and variables for plotting
    categoryColors = [56 61 150;... % numbers
        133 193 233;... % word
        244 208 63;...  % limb
        230 126 34 ;... % bodies
        203 67 53;...   % adult faces
        100 30 22;...   % kid faces
        126 47 142;...  % car
        191 0 191;...   % guitar
        104 159 56;...  % house
        0 77 64];       % corridor

     new_labels = {'n', 'w', 'l', 'b', 'a', 'k', 'c', 'g', 'h', 'p'};

     % make sure these are in correct order
       categoryImages = {'number_a.png', 'word_a.png', 'hand_a.png',...
       'body_a.png', 'adultface_a.png', 'childface_a.png', 'car_a.png',...
       'guitar_a.png', 'house_a.png', 'corridor_a.png'}; 

    %% Plot MDS
    figure(r)
    set(gcf,'color',[ 1 1 1])

    % loop through categories
    for c = 1:length(new_labels)
        xlim([-1 1])
        ylim([-1 1])
        hold on
        
        % add an icon for each of the categories
        categoryImage = [categoryImages{c}];
        
        % read in alpha channel for transparence of background
        [RGBdata, map, alpha] = imread(categoryImage, 'png');
        img = flip(RGBdata);            
        alpha = flip(alpha);  

        % color image in our color scheme
        redChannel =   img(:, :, 1);
        greenChannel = img(:, :, 2);
        blueChannel =  img(:, :, 3);
        blackPixels =redChannel ~= 255 & greenChannel  ~= 255 & blueChannel  ~= 255;

        redChannel(blackPixels) = categoryColors(c, 1);
        greenChannel(blackPixels) = categoryColors(c, 2);
        blueChannel(blackPixels) = categoryColors(c, 3);
        newimg = cat(3, redChannel, greenChannel, blueChannel);  

        % Center image around dot position and display it, 
        % for some reason words and numbers are smaller than the other
        % images, have to account for that.  Maybe find different images ?!
        if strcmp(categoryImages{c}, 'number_a.png') || strcmp(categoryImages{c}, 'word_a.png') 
            im = image([matrixEmbRoiAligned(c, 1)-0.08 matrixEmbRoiAligned(c, 1)+0.08],...
                [matrixEmbRoiAligned(c,2)-0.08 matrixEmbRoiAligned(c,2)+0.08], newimg, 'AlphaData', alpha);  
        else
            im = image([matrixEmbRoiAligned(c, 1)-0.06 matrixEmbRoiAligned(c, 1)+0.06],...
                [matrixEmbRoiAligned(c,2)-0.06 matrixEmbRoiAligned(c,2)+0.06], newimg, 'AlphaData', alpha);
        end

    end
    
 %% Formatting, save figure   
 % title
 title(roi,'Interpreter', 'none','FontSize',14)
 % axes
 set(gca, 'box', 'off')
 axes('position',get(gca,'position'),'visible','off');   
 ax = gca;
 ax.TickLength = [0.0001 0.0001]; 
 clearvars matrixEmb matrixDist matrixEmbRoiAligned RSMdata

end



